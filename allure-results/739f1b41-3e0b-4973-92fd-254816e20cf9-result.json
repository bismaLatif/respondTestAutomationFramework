{"name": "test_login", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSelectorException: Message: invalid selector\nfrom javascript error: {\"status\":32,\"value\":\"An invalid or illegal selector was specified\"}\n  (Session info: chrome=127.0.6533.89); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalid-selector-exception\nStacktrace:\n\tGetHandleVerifier [0x00007FF72AE19632+30946]\n\t(No symbol) [0x00007FF72ADCE3C9]\n\t(No symbol) [0x00007FF72ACC6FDA]\n\t(No symbol) [0x00007FF72ACCDA57]\n\t(No symbol) [0x00007FF72ACCFD31]\n\t(No symbol) [0x00007FF72ACCFDD0]\n\t(No symbol) [0x00007FF72AD17F69]\n\t(No symbol) [0x00007FF72AD1850C]\n\t(No symbol) [0x00007FF72AD5DCB7]\n\t(No symbol) [0x00007FF72AD3CAAF]\n\t(No symbol) [0x00007FF72AD5B041]\n\t(No symbol) [0x00007FF72AD3C813]\n\t(No symbol) [0x00007FF72AD0A6E5]\n\t(No symbol) [0x00007FF72AD0B021]\n\tGetHandleVerifier [0x00007FF72AF4F83D+1301229]\n\tGetHandleVerifier [0x00007FF72AF5BDB7+1351783]\n\tGetHandleVerifier [0x00007FF72AF52A03+1313971]\n\tGetHandleVerifier [0x00007FF72AE4DD06+245686]\n\t(No symbol) [0x00007FF72ADD758F]\n\t(No symbol) [0x00007FF72ADD3804]\n\t(No symbol) [0x00007FF72ADD3992]\n\t(No symbol) [0x00007FF72ADCA3EF]\n\tBaseThreadInitThunk [0x00007FF9BDA47374+20]\n\tRtlUserThreadStart [0x00007FF9BDE3CC91+33]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"fc80e55007ca484b66a75eb40233419b\")>\nlogin_data = {'invalid_email': 'bismarespond.io@yopmail.com', 'valid_email': 'bidmarespond.io@yopmail.com', 'valid_password': 'Bismarespond.io1'}\n\n    @allure.feature(\"Login Feature\")\n    def test_login(driver, login_data):\n        login_page = LoginPage(driver)\n        login_page.login(login_data[\"valid_email\"], login_data[\"valid_password\"])\n        wait = WebDriverWait(driver, 20)  # Adjust timeout as needed\n        # Wait for the URL to contain \"dashboard\"\n        wait.until(EC.url_contains(\"dashboard\"))\n        expected_url = \"https://app.respond.io/space/241150/dashboard\"\n        assert driver.current_url == expected_url, f\"Expected URL {expected_url}, but got {driver.current_url}\"\n>       login_page.click_signout()\n\ntests\\test_login.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\login_page.py:43: in click_signout\n    self.find_element(self.signout_button).click()\npages\\base_page.py:10: in find_element\n    return WebDriverWait(self.driver, time).until(EC.presence_of_element_located(locator))\nC:\\Python312\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:96: in until\n    value = method(self._driver)\nC:\\Python312\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:84: in _predicate\n    return driver.find_element(*locator)\nC:\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:748: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nC:\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001BAA9C57CB0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid selector\",\"message\":\"invalid selector\\\\nfrom javascript error: {\\...07FF72ADCA3EF]\\\\n\\\\tBaseThreadInitThunk [0x00007FF9BDA47374+20]\\\\n\\\\tRtlUserThreadStart [0x00007FF9BDE3CC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSelectorException: Message: invalid selector\nE       from javascript error: {\"status\":32,\"value\":\"An invalid or illegal selector was specified\"}\nE         (Session info: chrome=127.0.6533.89); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalid-selector-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF72AE19632+30946]\nE       \t(No symbol) [0x00007FF72ADCE3C9]\nE       \t(No symbol) [0x00007FF72ACC6FDA]\nE       \t(No symbol) [0x00007FF72ACCDA57]\nE       \t(No symbol) [0x00007FF72ACCFD31]\nE       \t(No symbol) [0x00007FF72ACCFDD0]\nE       \t(No symbol) [0x00007FF72AD17F69]\nE       \t(No symbol) [0x00007FF72AD1850C]\nE       \t(No symbol) [0x00007FF72AD5DCB7]\nE       \t(No symbol) [0x00007FF72AD3CAAF]\nE       \t(No symbol) [0x00007FF72AD5B041]\nE       \t(No symbol) [0x00007FF72AD3C813]\nE       \t(No symbol) [0x00007FF72AD0A6E5]\nE       \t(No symbol) [0x00007FF72AD0B021]\nE       \tGetHandleVerifier [0x00007FF72AF4F83D+1301229]\nE       \tGetHandleVerifier [0x00007FF72AF5BDB7+1351783]\nE       \tGetHandleVerifier [0x00007FF72AF52A03+1313971]\nE       \tGetHandleVerifier [0x00007FF72AE4DD06+245686]\nE       \t(No symbol) [0x00007FF72ADD758F]\nE       \t(No symbol) [0x00007FF72ADD3804]\nE       \t(No symbol) [0x00007FF72ADD3992]\nE       \t(No symbol) [0x00007FF72ADCA3EF]\nE       \tBaseThreadInitThunk [0x00007FF9BDA47374+20]\nE       \tRtlUserThreadStart [0x00007FF9BDE3CC91+33]\n\nC:\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: InvalidSelectorException"}, "start": 1722694905768, "stop": 1722694915036, "uuid": "6872249f-da35-4a42-baad-d20ffea76211", "historyId": "a707b9555172d26c5c1ec2d556e674f3", "testCaseId": "a707b9555172d26c5c1ec2d556e674f3", "fullName": "tests.test_login#test_login", "labels": [{"name": "feature", "value": "Login Feature"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_login"}, {"name": "host", "value": "DESKTOP-1RESUV2"}, {"name": "thread", "value": "15776-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_login"}]}