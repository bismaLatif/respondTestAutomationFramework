{"name": "test_workspace_functionality", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button data-v-c05c4d6c=\"\" type=\"button\" class=\"v-btn v-btn--elevated v-theme--light v-btn--density-default elevation-0 v-btn--size-default v-btn--variant-elevated dls-min-w-0 dls-select-none dls-items-center dls-justify-center dls-transition-colors disabled:dls-pointer-events-none rtl:flex-row-reverse dls-normal-case disabled:dls-cursor-not-allowed disabled:dls-bg-button-disabled disabled:dls-border-button-disabled disabled:dls-text-text-disabled dls-fill-neutral-white dls-text-neutral-white data-[disabled=true]:dls-border-button-disabled dls-bg-button-primary dls-border-button-primary dls-border dls-border-solid active:dls-border-primary-pressed active:dls-bg-button-primary-pressed hover:dls-bg-button-primary-on-hover hover:dls-border-button-primary-on-hover dls-rounded-button dls-h-[32px] dls-pl-14 dls-pr-14 dls-py-0 data-[iconstart=true]:dls-pl-[8px] data-[iconend=true]:dls-pr-[8px] [&amp;_svg]:dls-h-icon-sm [&amp;_svg]:dls-w-icon-sm [&amp;_svg]:dls-text-icon-sm [&amp;_i]:dls-text-icon-sm [&amp;_i]:dls-w-icon-sm [&amp;_i]:dls-h-icon-sm data-[variant=link]:dls-px-0 dls-relative\" data-loading=\"[object Object]\" data-disabled=\"false\" data-iconstart=\"false\" data-iconend=\"false\" data-variant=\"primary\" data-color=\"primary\" data-size=\"large\">...</button> is not clickable at point (1447, 92). Other element would receive the click: <div class=\"v-overlay__scrim\"></div>\n  (Session info: chrome=127.0.6533.89)\nStacktrace:\n\tGetHandleVerifier [0x00007FF7FBE29632+30946]\n\t(No symbol) [0x00007FF7FBDDE3C9]\n\t(No symbol) [0x00007FF7FBCD6FDA]\n\t(No symbol) [0x00007FF7FBD2FEEE]\n\t(No symbol) [0x00007FF7FBD2D962]\n\t(No symbol) [0x00007FF7FBD2AE7B]\n\t(No symbol) [0x00007FF7FBD2A095]\n\t(No symbol) [0x00007FF7FBD1C271]\n\t(No symbol) [0x00007FF7FBD4CA6A]\n\t(No symbol) [0x00007FF7FBD1BBB6]\n\t(No symbol) [0x00007FF7FBD4CC80]\n\t(No symbol) [0x00007FF7FBD6B041]\n\t(No symbol) [0x00007FF7FBD4C813]\n\t(No symbol) [0x00007FF7FBD1A6E5]\n\t(No symbol) [0x00007FF7FBD1B021]\n\tGetHandleVerifier [0x00007FF7FBF5F83D+1301229]\n\tGetHandleVerifier [0x00007FF7FBF6BDB7+1351783]\n\tGetHandleVerifier [0x00007FF7FBF62A03+1313971]\n\tGetHandleVerifier [0x00007FF7FBE5DD06+245686]\n\t(No symbol) [0x00007FF7FBDE758F]\n\t(No symbol) [0x00007FF7FBDE3804]\n\t(No symbol) [0x00007FF7FBDE3992]\n\t(No symbol) [0x00007FF7FBDDA3EF]\n\tBaseThreadInitThunk [0x00007FF9BDA47374+20]\n\tRtlUserThreadStart [0x00007FF9BDE3CC91+33]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"bedfd2a128cd8e4392e65458f41cbdf9\")>\nlogin_data = {'dashboard_url': 'https://app.respond.io/space/241150/dashboard', 'invalid_email': 'bismarespond.io@yopmail.com', 'login_url': 'https://app.respond.io/user/login', 'valid_email': 'bidmarespond.io@yopmail.com', ...}\n\n    def test_workspace_functionality(driver, login_data):\n        # Perform login\n        login_page = LoginPage(driver)\n        login_page.login(login_data['valid_email'], login_data['valid_password'])\n        workspace_page = WorkspacePage(driver)\n        workspace_page.navigate_to_workspace_action()\n        workspace_page.add_workspace_screen()\n        current_url = driver.current_url\n        assert \"workflows\" in current_url, f\"Expected 'workflows' in URL, but got {current_url}\"\n        workspace_page.click_add_workflow_button()\n>       workspace_page.click_start_from_scratch()\n\ntests\\test_workspace.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\workspace_page.py:45: in click_start_from_scratch\n    active_element.click()\nC:\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nC:\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nC:\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001E3DE8960F0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF7FBDDA3EF]\\\\n\\\\tBaseThreadInitThunk [0x00007FF9BDA47374+20]\\\\n\\\\tRtlUserThreadStart [0x00007FF9BDE3CC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button data-v-c05c4d6c=\"\" type=\"button\" class=\"v-btn v-btn--elevated v-theme--light v-btn--density-default elevation-0 v-btn--size-default v-btn--variant-elevated dls-min-w-0 dls-select-none dls-items-center dls-justify-center dls-transition-colors disabled:dls-pointer-events-none rtl:flex-row-reverse dls-normal-case disabled:dls-cursor-not-allowed disabled:dls-bg-button-disabled disabled:dls-border-button-disabled disabled:dls-text-text-disabled dls-fill-neutral-white dls-text-neutral-white data-[disabled=true]:dls-border-button-disabled dls-bg-button-primary dls-border-button-primary dls-border dls-border-solid active:dls-border-primary-pressed active:dls-bg-button-primary-pressed hover:dls-bg-button-primary-on-hover hover:dls-border-button-primary-on-hover dls-rounded-button dls-h-[32px] dls-pl-14 dls-pr-14 dls-py-0 data-[iconstart=true]:dls-pl-[8px] data-[iconend=true]:dls-pr-[8px] [&amp;_svg]:dls-h-icon-sm [&amp;_svg]:dls-w-icon-sm [&amp;_svg]:dls-text-icon-sm [&amp;_i]:dls-text-icon-sm [&amp;_i]:dls-w-icon-sm [&amp;_i]:dls-h-icon-sm data-[variant=link]:dls-px-0 dls-relative\" data-loading=\"[object Object]\" data-disabled=\"false\" data-iconstart=\"false\" data-iconend=\"false\" data-variant=\"primary\" data-color=\"primary\" data-size=\"large\">...</button> is not clickable at point (1447, 92). Other element would receive the click: <div class=\"v-overlay__scrim\"></div>\nE         (Session info: chrome=127.0.6533.89)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7FBE29632+30946]\nE       \t(No symbol) [0x00007FF7FBDDE3C9]\nE       \t(No symbol) [0x00007FF7FBCD6FDA]\nE       \t(No symbol) [0x00007FF7FBD2FEEE]\nE       \t(No symbol) [0x00007FF7FBD2D962]\nE       \t(No symbol) [0x00007FF7FBD2AE7B]\nE       \t(No symbol) [0x00007FF7FBD2A095]\nE       \t(No symbol) [0x00007FF7FBD1C271]\nE       \t(No symbol) [0x00007FF7FBD4CA6A]\nE       \t(No symbol) [0x00007FF7FBD1BBB6]\nE       \t(No symbol) [0x00007FF7FBD4CC80]\nE       \t(No symbol) [0x00007FF7FBD6B041]\nE       \t(No symbol) [0x00007FF7FBD4C813]\nE       \t(No symbol) [0x00007FF7FBD1A6E5]\nE       \t(No symbol) [0x00007FF7FBD1B021]\nE       \tGetHandleVerifier [0x00007FF7FBF5F83D+1301229]\nE       \tGetHandleVerifier [0x00007FF7FBF6BDB7+1351783]\nE       \tGetHandleVerifier [0x00007FF7FBF62A03+1313971]\nE       \tGetHandleVerifier [0x00007FF7FBE5DD06+245686]\nE       \t(No symbol) [0x00007FF7FBDE758F]\nE       \t(No symbol) [0x00007FF7FBDE3804]\nE       \t(No symbol) [0x00007FF7FBDE3992]\nE       \t(No symbol) [0x00007FF7FBDDA3EF]\nE       \tBaseThreadInitThunk [0x00007FF9BDA47374+20]\nE       \tRtlUserThreadStart [0x00007FF9BDE3CC91+33]\n\nC:\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "start": 1722716871068, "stop": 1722716914038, "uuid": "24be46ab-1ea2-4d68-9a3b-2cb07e8b6967", "historyId": "c506d1bcab86e29833f8b448a46f8225", "testCaseId": "c506d1bcab86e29833f8b448a46f8225", "fullName": "tests.test_workspace#test_workspace_functionality", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_workspace"}, {"name": "host", "value": "DESKTOP-1RESUV2"}, {"name": "thread", "value": "22268-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_workspace"}]}